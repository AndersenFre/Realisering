/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package realisering15;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.JOptionPane;

/**
 * @author Grupp15
 */
public class AdminTaBortAlien extends javax.swing.JFrame {

    private static InfDB databas;
    private String id;

    /**
     * Creates new form AdminTaBortAlien
     */
    public AdminTaBortAlien(InfDB databas, String id) {
        initComponents();
        this.databas = databas;
        this.id = id;
        fyllCbValjAlienID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTaBortAlienRubrik = new javax.swing.JLabel();
        btnTaBortAlienTillbaka = new javax.swing.JButton();
        lblValjAlienID = new javax.swing.JLabel();
        btnTaBortAlienRader = new javax.swing.JButton();
        cbValjAlienID = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaAlienInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTaBortAlienRubrik.setText("Radera alien");

        btnTaBortAlienTillbaka.setText("Tillbaka");
        btnTaBortAlienTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAlienTillbakaActionPerformed(evt);
            }
        });

        lblValjAlienID.setText("Välj Alien ID");

        btnTaBortAlienRader.setText("Radera");
        btnTaBortAlienRader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAlienRaderActionPerformed(evt);
            }
        });

        cbValjAlienID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbValjAlienIDActionPerformed(evt);
            }
        });

        txtAreaAlienInfo.setColumns(20);
        txtAreaAlienInfo.setRows(5);
        jScrollPane1.setViewportView(txtAreaAlienInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTaBortAlienTillbaka)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTaBortAlienRader))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(lblTaBortAlienRubrik)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblValjAlienID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbValjAlienID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTaBortAlienRubrik)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValjAlienID)
                    .addComponent(cbValjAlienID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTaBortAlienTillbaka)
                    .addComponent(btnTaBortAlienRader))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metod som fyller scrollistan med registrerade aliens
     */
    private void fyllCbValjAlienID() {
        String fraga = "SELECT alien_id FROM alien";

        ArrayList<String> allaAlienID = new ArrayList<>();
        
        Collections.sort(allaAlienID);
        
        try {
            allaAlienID = databas.fetchColumn(fraga);
            for (String benamning : allaAlienID) {
                cbValjAlienID.addItem(benamning);
            }
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
    }

    /**
     * Metod som för användaren tillbaka till föregående fönster och stänger
     * nuvarande fönster
     */
    private void btnTaBortAlienTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAlienTillbakaActionPerformed
        AdminTaBortAlien.this.dispose();
    }//GEN-LAST:event_btnTaBortAlienTillbakaActionPerformed

    /**
     * Metod som tar fram information om den valda alien
     */
    private void cbValjAlienIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbValjAlienIDActionPerformed
        txtAreaAlienInfo.setText("");

        try {
            HashMap<String, String> soktAlien;
            String tillhorRas = "";
            String squid = "Squid";
            String worm = "Worm";
            String bog = "Boglodite";
            ArrayList<String> arSquid = new ArrayList<String>();
            ArrayList<String> arWorm = new ArrayList<String>();
            ArrayList<String> arBog = new ArrayList<String>();
            String fragaWorm = "SELECT alien_id FROM worm";
            String fragaSquid = "SELECT alien_id FROM squid";
            String fragaBog = "SELECT alien_id FROM boglodite";
            arSquid = databas.fetchColumn(fragaSquid);
            arWorm = databas.fetchColumn(fragaWorm);
            arBog = databas.fetchColumn(fragaBog);
            String valtAlienID = cbValjAlienID.getSelectedItem().toString();
            String fragaAlien = "SELECT * FROM alien where alien_id=" + valtAlienID;
            soktAlien = databas.fetchRow(fragaAlien);

            for (String idSquid : arSquid) {
                if (valtAlienID.equals(idSquid)) {
                    tillhorRas = squid;
                }
            }
            for (String idWorm : arWorm) {
                if (valtAlienID.equals(idWorm)) {
                    tillhorRas = worm;
                }
            }
            for (String idBog : arBog) {
                if (valtAlienID.equals(idBog)) {
                    tillhorRas = bog;
                }
            }

            txtAreaAlienInfo.append("Alien_ID" + "\t");
            txtAreaAlienInfo.append("Namn" + "\t");
            txtAreaAlienInfo.append("Ras" + "\n");
            txtAreaAlienInfo.append(soktAlien.get("Alien_ID") + "\t");
            txtAreaAlienInfo.append(soktAlien.get("Namn") + "\t");
            txtAreaAlienInfo.append(tillhorRas);

        } catch (InfException ex1) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmeddelande" + ex1.getMessage());
        }
    }//GEN-LAST:event_cbValjAlienIDActionPerformed

    /**
     * Metod som tar bord den valda alien
     */
    private void btnTaBortAlienRaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAlienRaderActionPerformed
        try {

            String valtAlienID = cbValjAlienID.getSelectedItem().toString();
            String raderaAlien = "delete from alien where alien_id=" + valtAlienID;

            String raderaSub = "";

            ArrayList<String> arWorm = new ArrayList<String>();
            ArrayList<String> arSquid = new ArrayList<String>();
            ArrayList<String> arBog = new ArrayList<String>();
            String fragaWorm = "SELECT alien_id FROM worm";
            String fragaSquid = "SELECT alien_id FROM squid";
            String fragaBog = "SELECT alien_id FROM boglodite";
            arWorm = databas.fetchColumn(fragaWorm);
            arSquid = databas.fetchColumn(fragaSquid);
            arBog = databas.fetchColumn(fragaBog);

            for (String idWorm : arWorm) {
                if (valtAlienID.equals(idWorm)) {
                    raderaSub = "delete from worm where alien_id=" + valtAlienID;
                }
            }
            for (String idSquid : arSquid) {
                if (valtAlienID.equals(idSquid)) {
                    raderaSub = "delete from squid where alien_id=" + valtAlienID;
                }
            }
            for (String idBog : arBog) {
                if (valtAlienID.equals(idBog)) {
                    raderaSub = "delete from boglodite where alien_ID=" + valtAlienID;
                }
            }
            databas.delete(raderaAlien);
            databas.delete(raderaSub);
            JOptionPane.showMessageDialog(null, "Alien har raderats");
            AdminTaBortAlien.this.dispose();

        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
    }//GEN-LAST:event_btnTaBortAlienRaderActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTaBortAlienRader;
    private javax.swing.JButton btnTaBortAlienTillbaka;
    private javax.swing.JComboBox<String> cbValjAlienID;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTaBortAlienRubrik;
    private javax.swing.JLabel lblValjAlienID;
    private javax.swing.JTextArea txtAreaAlienInfo;
    // End of variables declaration//GEN-END:variables
}